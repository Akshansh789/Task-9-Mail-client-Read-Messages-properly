[{"C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\index.js":"1","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\App.js":"2","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Store\\index.js":"3","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Layout\\Navigationbar.js":"4","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Pages\\ComoseMail.js":"5","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Pages\\Inbox.js":"6","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Pages\\Login.js":"7"},{"size":382,"mtime":1678794467408,"results":"8","hashOfConfig":"9"},{"size":922,"mtime":1679637238699,"results":"10","hashOfConfig":"9"},{"size":973,"mtime":1678794467486,"results":"11","hashOfConfig":"9"},{"size":802,"mtime":1678794467427,"results":"12","hashOfConfig":"9"},{"size":3398,"mtime":1679637232019,"results":"13","hashOfConfig":"9"},{"size":3831,"mtime":1679637233964,"results":"14","hashOfConfig":"9"},{"size":5972,"mtime":1679637235383,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ckkx9k",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\index.js",[],[],"C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\App.js",["41","42"],[],"import Navigationbar from './Components/Layout/Navigationbar';\nimport Login from './Components/Pages/Login';\nimport './App.css'\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport DummyScreen from './Components/Pages/Inbox';\nimport { useSelector } from 'react-redux';\nimport Inbox from './Components/Pages/Inbox';\nimport ComposeMail from './Components/Pages/ComoseMail';\n\n\n\nfunction App() {\n  const token = useSelector(state => state.authentication.token)\n  return (\n    <>\n      <Navigationbar />\n      <div>\n        <Switch>\n          <Route exact path='/'>\n            <Login />\n          </Route>\n          <Route exact path='/composemail'>\n            <ComposeMail />\n          </Route>\n          <Route exact path='/inbox'>\n            {token && <Inbox />}\n            {!token && <Redirect to='/' />}\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Store\\index.js",[],[],"C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Layout\\Navigationbar.js",[],[],"C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Pages\\ComoseMail.js",["43","44"],[],"import React, { useRef, useState } from 'react';\nimport './Inbox'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { Button } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { EditorState} from 'draft-js';\n\nfunction removeSpecialChar(mail) {\n    let newMail = \"\";\n    for (let i = 0; i < mail.length; i++) {\n        if (mail[i] !== \"@\" && mail[i] !== \".\") {\n            newMail += mail[i]\n        }\n    }\n    return newMail;\n}\n\nfunction ComposeMail() {\n    const receiver = useRef();\n    const subject = useRef();\n    const mailBody = useRef();\n    const sender = useSelector(state => state.authentication.user);\n\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n\n    // const updateTextDescription = async (state) => {\n    //     await setEditorState(state);\n    //     const data = convertToRaw(editorState.getCurrentContent());\n\n    // };\n    const handleSendMail = async (e) => {\n        e.preventDefault();\n        console.log(\"sended\");\n        console.log(receiver.current.value, subject.current.value, mailBody.current.value, sender);\n\n        const newMail = {\n            mailSubject: subject.current.value,\n            mailContent: mailBody.current.value,\n            Sender: sender,\n            isReaded:false\n        }\n\n        if (receiver.current.value.length > 0 && mailBody.current.value.length > 0 && subject.current.value.length > 0) {\n\n            try {\n                let responce = await fetch(\n                    `https://mail-data-d37a7-default-rtdb.firebaseio.com/mail/${removeSpecialChar(receiver.current.value)}.json`,\n                    {\n                        method: 'POST',\n                        body: JSON.stringify(newMail),\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    }\n                )\n                if (responce.ok) {\n                    let data = await responce.json();\n                    console.log(data);\n                    alert(\"mail sent successfully\");\n                } else {\n                    throw new Error(\"Failed to send mail\")\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            alert(\"please fill all the data\")\n        }\n    }\n\n    return (\n        <>\n            <div className=\"App container\">\n                <h1 className=\"text-center\">\n                    Draft your mail\n                </h1>\n                <div>\n                    <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder='To' ref={receiver} aria-describedby=\"emailHelp\" />\n                    <hr />\n                </div>\n                <div>\n                    <input type=\"email\" className=\"form-control\" id=\"exampleInputSubject\" ref={subject} aria-describedby=\"emailHelp\" placeholder='Subject' />\n                    <hr />\n                </div>\n                <textarea className='w-100' style={{ height: \"20rem\" }} ref={mailBody} placeholder='Draft your mail here' />\n\n            </div>\n            <div className='container  text-center'>\n                <Button variant=\"primary\" className='my-2 w-25' onClick={handleSendMail}>\n                    Send\n                </Button>\n            </div>\n        </>\n    )\n}\n\nexport default ComposeMail;\n","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Pages\\Inbox.js",["45"],[],"import React, { useEffect } from 'react';\nimport './Inbox'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { Accordion, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { messageActions } from '../Store';\nimport { useHistory } from 'react-router-dom';\nimport { Dot } from 'react-bootstrap-icons';\nfunction removeSpecialChar(mail) {\n  let newMail = \"\";\n  for (let i = 0; i < mail.length; i++) {\n    if (mail[i] !== \"@\" && mail[i] !== \".\") {\n      newMail += mail[i]\n    }\n  }\n  return newMail;\n}\nfunction countUnreadMessages(arr) {\n  let unreadeMessages = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (!arr.isReaded) {\n      unreadeMessages = unreadeMessages + 1;\n    }\n  }\n  return unreadeMessages;\n}\n\nfunction Inbox() {\n  const user = removeSpecialChar(useSelector(state => state.authentication.user));\n  const messages = useSelector(state => state.messages.messages);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const handleCompose = (e) => {\n    e.preventDefault();\n    history.push(\"/composemail\");\n  }\n  const handleReadedMessage = async (message) => {\n    console.log(message)\n    console.log(\"clicked\");\n    console.log(user,message.name);\n    try {\n      let responce = await fetch(\n        `https://mail-data-d37a7-default-rtdb.firebaseio.com/mail/${user}/${message.name}.json`,\n        {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body:{\"isReaded\":true}\n        }\n      )\n      if (responce.ok) {\n        alert(\"Readed\")\n      } else {\n        throw new Error(\"Failed to Read mail\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    async function fetchMessages() {\n      try {\n        let responce = await fetch(\n          `https://mail-data-d37a7-default-rtdb.firebaseio.com/mail/${user}.json`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }\n        )\n        if (responce.ok) {\n          let data = await responce.json();\n          console.log(data);\n          const keys = Object.keys(data);\n          let newMessageArray = [];\n          keys.forEach((key) => {\n            newMessageArray.unshift({ ...data[key], name: key })\n          });\n          console.log(newMessageArray);\n          dispatch(messageActions.setMessages(newMessageArray));\n        } else {\n          throw new Error(\"Failed to fetch mail\")\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    let fetching = setTimeout(() => {\n      fetchMessages();\n    }, 10000);\n    return () => {\n      clearTimeout(fetching);\n    }\n  }, [user, messages])\n\n  return (\n    <div className='container'>\n\n      <div className='my-2  mx-2 row'>\n        <h1 className=\"fst-italic col-md-8\" >\n          Welcome to your mail box!!!\n        </h1>\n        <hr />\n      </div>\n      <div>\n        <Button variant=\"primary\" onClick={handleCompose}>\n          Compose\n        </Button>\n      </div>\n      <div>\n        <h1 className='text-center'>Inbox</h1>\n        <span className='float-right h4'>Unread Messages:{countUnreadMessages(messages)}</span>\n      </div>\n      {messages.map((message) => {\n        return <Accordion defaultActiveKey=\"0\" onClick={() =>handleReadedMessage(message)}>\n          <Accordion.Item eventKey=\"1\">\n            <Accordion.Header>{!message.isReaded && <Dot width={30} height={30} color=\"blue\" />} From:{message.Sender}</Accordion.Header>\n            <Accordion.Body>\n              <h5>Subject:{message.mailSubject}</h5>\n              <p>{message.mailContent}</p>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      })\n      }\n    </div>\n  )\n}\n\nexport default Inbox;\n\n\n\n\n\n\n\n\n\n","C:\\Users\\chaha\\Downloads\\Task-9 Read Messages properly\\src\\Components\\Pages\\Login.js",["46"],[],"import React, { useRef, useState } from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n\nimport { authActions } from '../Store';\nfunction removeSpecialChar(mail){\n    let newMail=\"\";\n    for(let i=0;i<mail.length;i++){\n        if(mail[i]!==\"@\" && mail[i]!==\".\"){\n        newMail +=mail[i]\n        }\n    }\n    return newMail;\n}\n\nconst Login = () => {\n    const [login, setLogin] = useState(false);\n    const enteredMail = useRef();\n    const enteredPassword = useRef();\n    const enteredConfirmPassword = useRef();\n    \n    let dispatch=useDispatch();\n    const history=useHistory();\n    const toggleLogin = () => {\n        setLogin(!login);\n    }\n    const handleLogin = async (e) => {\n        e.preventDefault();\n        if (!login) {\n            if (enteredMail.current.value.length > 0 && enteredPassword.current.value.length > 0 && enteredConfirmPassword.current.value.length > 0) {\n                if (enteredPassword.current.value !== enteredConfirmPassword.current.value) {\n                    alert(\"password and confirmPasswors not matching\")\n                } else {\n                    try {\n                        let responce = await fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCO6abgBh4N4HBaulncf_fiJlUKLmvg4l8\", {\n                            method: \"POST\",\n                            body: JSON.stringify({\n                                \"email\": enteredMail.current.value,\n                                \"password\": enteredPassword.current.value,\n                                \"returnSecureToken\": true\n                            }),\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            }\n                        })\n                        if (responce.ok) {\n                            console.log(\"User has successfully signed up\")\n                            alert(`User has successfully signed up`)\n                            const data=await responce.json();\n                            dispatch(authActions.setToken(data.idToken));\n                            dispatch(authActions.setUser(enteredMail.current.value));\n                            localStorage.setItem(\"token\",data.idToken)\n                            localStorage.setItem(\"user\",enteredMail.current.value)\n                        } else {\n                            alert(\"Authentication failed\")\n                            throw new Error(\"Sign up failed\");\n                        }\n                    } catch (error) {\n                        console.log(error);\n                    }\n                }\n            } else {\n                alert(\"please fill all the data\")\n            }\n        } else {\n            if (enteredMail.current.value.length > 0 && enteredPassword.current.value.length > 0) {\n                try {\n                    let responce = await fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCO6abgBh4N4HBaulncf_fiJlUKLmvg4l8\", {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            \"email\": enteredMail.current.value,\n                            \"password\": enteredPassword.current.value,\n                            \"returnSecureToken\": true\n                        }),\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    })\n                    if (responce.ok) {\n                        const data=await responce.json();\n                        console.log(data.idToken);\n                        dispatch(authActions.setToken(data.idToken));\n                        dispatch(authActions.setUser(enteredMail.current.value));\n                        localStorage.setItem(\"token\",data.idToken)\n                        console.log(\"User has successfully Log in\")\n                        alert(`User has successfully logged in`)\n                        localStorage.setItem(\"user\",enteredMail.current.value)\n                        history.push('/inbox')\n                    } else {\n                        alert(\"Authentication failed\")\n                        throw new Error(\"Log in failed\");\n                    }\n                } catch (error) {\n                    console.log(error);\n                }\n            } else {\n                alert(\"please fill all the data\")\n            }\n        }\n    }\n    return (\n        <div className='container w-25 my-3 border border-1 align-top bg-light rounded'>\n            <Form className='my-auto'>\n                <h4 className='text-center py-4'>{!login ? \"Sign Up\" : \"Log In\"}</h4>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                    <Form.Control type=\"email\" placeholder=\"Email\" ref={enteredMail} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                    <Form.Control type=\"password\" placeholder=\"Password\" ref={enteredPassword} />\n                </Form.Group>\n                {!login && <Form.Group className=\"mb-3\" controlId=\"formBasicConfirmPassword\">\n                    <Form.Control type=\"password\" placeholder=\"Confirm Password\" ref={enteredConfirmPassword} />\n                </Form.Group>}\n                <Button variant=\"primary\" className='w-100' type=\"submit\" onClick={handleLogin}>\n                    {!login ? \"Sign Up\" : \"Log In\"}\n                </Button>\n                {login && <p className='text-center text-primary'>Forget password?</p>}\n                <Button variant=\"outline-success\" className='my-2 w-100' onClick={toggleLogin}>\n                    {!login ? \"Have an account?Login\" : \"Haven't Account?Sign Up\"}\n                </Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default Login\n",{"ruleId":"47","severity":1,"message":"48","line":4,"column":10,"nodeType":"49","messageId":"50","endLine":4,"endColumn":23},{"ruleId":"47","severity":1,"message":"51","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":19},{"ruleId":"47","severity":1,"message":"52","line":24,"column":12,"nodeType":"49","messageId":"50","endLine":24,"endColumn":23},{"ruleId":"47","severity":1,"message":"53","line":24,"column":25,"nodeType":"49","messageId":"50","endLine":24,"endColumn":39},{"ruleId":"54","severity":1,"message":"55","line":96,"column":6,"nodeType":"56","endLine":96,"endColumn":22,"suggestions":"57"},{"ruleId":"47","severity":1,"message":"58","line":9,"column":10,"nodeType":"49","messageId":"50","endLine":9,"endColumn":27},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'DummyScreen' is defined but never used.","'editorState' is assigned a value but never used.","'setEditorState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["59"],"'removeSpecialChar' is defined but never used.",{"desc":"60","fix":"61"},"Update the dependencies array to be: [user, messages, dispatch]",{"range":"62","text":"63"},[2740,2756],"[user, messages, dispatch]"]